<% @ServiceHost Language=c# Service="ServiceLibrary.Service" CodeBehind="IContract.cs" %>

using System;
using System.Linq;
using System.ServiceModel;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Data.Entity;
using System.Runtime.Serialization;
using System.Collections.Generic;

namespace ServiceLibrary
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession, ConcurrencyMode = ConcurrencyMode.Single)]
    public class Service : IContractChat, IContractWeather, IContractUser
    {
        public static List<Service> Services { get; set; }

        private List<ChatMessage> Messages { get; set; }

        private User User { get; set; }

        public Service()
        {
            if(Service.Services == null)
                Service.Services = new List<Service>();
            Service.Services.Add(this);
            OperationContext.Current.OperationCompleted += this.ServiceSessionClosed;
            this.Messages = new List<ChatMessage>();
            this.Messages.Add(new ChatMessage() { Text = Service.Services.Count.ToString(), User = null, Type = "service_total" });
        }
        //won't work for Single/PerCall InstanceContextMode.
        private void ServiceSessionClosed(object sender, EventArgs e)
        {
            Service.Services.Remove(this);
        }
        private void Announce(string text, User user)
        {
            foreach (Service service in Service.Services)
            {
                var message = new ChatMessage() { User = this.User, Text = text, Type = "new_messages" };
                service.Messages.Add(message);
            }
        }
        public void PushMessage(string message)
        {
            if(this.User != null)
                this.Announce(message, this.User);
        }
        public List<ChatMessage> GetMessages()
        {
            var messages = this.Messages;
            this.Messages = new List<ChatMessage>();
            return messages;
        }
        public bool LogIn(string name, string password)
        {
            using (DBContext DB = new DBContext())
            {
                var result = DB.Users.Where(i => i.Name == name && i.Password == password).ToList();
                if (result.Count > 0)
                {
                    var user = result.First();
                    user.LastLogin = DateTime.Now;
                    this.UpdateUser(user);
                    this.User = user;
                    return true;
                }
                return false;
            }
        }
        public bool LogOut()
        {
            if (this.User == null)
                return false;
            else
            {
                this.User = null;
                return true;
            }
        }
        // USER IMPLEMENTATION
        public User Authenticate(string name, string password)
        {
            using (DBContext DB = new DBContext())
            {
                var result = DB.Users.Where(i => i.Name == name && i.Password == password).ToList();
                if (result.Count > 0)
                {
                    var user = result.First();
                    user.LastLogin = DateTime.Now;
                    this.UpdateUser(user);
                    this.User = user;
                    return user;
                }
                return null;
            }
        }
        public User AddUser(string name, string password)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    User user = new User();
                    user.Name = name;
                    user.Password = password;
                    DB.Users.Add(user);
                    DB.SaveChanges();
                    return user;
                }
                catch (Exception ex)
                {
                    return null;
                }
            }
        }
        public bool UpdateUser(User user)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    DB.Entry(user).State = EntityState.Modified;
                    DB.SaveChanges();
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }
        }
        public bool DeleteUser(User user)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    DB.Users.Remove(user);
                    DB.SaveChanges();
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }
        }
        public WeathersCo GetWeather(string city)
        {
            HttpWebRequest webRequest = HttpWebRequest.CreateHttp(@"http://weathers.co/api.php?city=" + city.Trim());
            using (HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse)
            {
                using (StreamReader streamReader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer Json = new JavaScriptSerializer();
                    try
                    {
                        return Json.Deserialize<WeathersCo>(streamReader.ReadToEnd());
                    }
                    finally { }
                }
            }
        }
    }
}