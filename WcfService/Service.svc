<% @ServiceHost Language=c# Service="ServiceLibrary.Service" CodeBehind="IContract.cs" %>

using System;
using System.Linq;
using System.ServiceModel;
using System.Net;
using System.Web.Script.Serialization;
using System.IO;
using System.Data.Entity;
using System.Runtime.Serialization;

namespace ServiceLibrary
{

    public class Service : IContract, IContractAlter
    {
        public void GetData()
        {
            // here is method that runs on different EndPoint with different behavior(service behavior, binding type)
        }
        public WeathersCo GetWeather(string city)
        {
            HttpWebRequest webRequest = HttpWebRequest.CreateHttp(@"http://weathers.co/api.php?city=" + city.Trim());
            using (HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse)
            {
                using (StreamReader streamReader = new StreamReader(webResponse.GetResponseStream()))
                {
                    JavaScriptSerializer Json = new JavaScriptSerializer();
                    try
                    {
                        return Json.Deserialize<WeathersCo>(streamReader.ReadToEnd());
                    }
                    finally { }
                }
            }
        }
        public User Authenticate(string name, string password)
        {
            using (DBContext DB = new DBContext())
            {
                var result = DB.Users.Where(i => i.Name == name && i.Password == password).ToList();
                if (result.Count > 0)
                {
                    var user = result.First();
                    user.LastLogin = DateTime.Now;
                    this.UpdateUser(user);
                    return result.First();
                }

                return null;
            }
        }
        public User AddUser(string name, string password)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    User user = new User();
                    user.Name = name;
                    user.Password = password;
                    DB.Users.Add(user);
                    DB.SaveChanges();
                    return user;
                }
                catch (Exception ex)
                {
                    return null;
                }
            }
        }
        public bool UpdateUser(User user)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    DB.Entry(user).State = EntityState.Modified;
                    DB.SaveChanges();
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }
        }
        public bool DeleteUser(User user)
        {
            using (DBContext DB = new DBContext())
            {
                try
                {
                    DB.Users.Remove(user);
                    DB.SaveChanges();
                    return true;
                }
                catch (Exception e)
                {
                    return false;
                }
            }
        }
    }
}