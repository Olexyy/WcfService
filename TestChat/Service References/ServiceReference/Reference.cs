//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestChat.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeathersCo", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class WeathersCo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string apiVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestChat.ServiceReference.WeathersCo.WeathersCoData dataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string apiVersion {
            get {
                return this.apiVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.apiVersionField, value) != true)) {
                    this.apiVersionField = value;
                    this.RaisePropertyChanged("apiVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestChat.ServiceReference.WeathersCo.WeathersCoData data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="WeathersCo.WeathersCoData", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary")]
        [System.SerializableAttribute()]
        public partial class WeathersCoData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string dateField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string dayField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string humidityField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string locationField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string skytextField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string temperatureField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string windField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string date {
                get {
                    return this.dateField;
                }
                set {
                    if ((object.ReferenceEquals(this.dateField, value) != true)) {
                        this.dateField = value;
                        this.RaisePropertyChanged("date");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string day {
                get {
                    return this.dayField;
                }
                set {
                    if ((object.ReferenceEquals(this.dayField, value) != true)) {
                        this.dayField = value;
                        this.RaisePropertyChanged("day");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string humidity {
                get {
                    return this.humidityField;
                }
                set {
                    if ((object.ReferenceEquals(this.humidityField, value) != true)) {
                        this.humidityField = value;
                        this.RaisePropertyChanged("humidity");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string location {
                get {
                    return this.locationField;
                }
                set {
                    if ((object.ReferenceEquals(this.locationField, value) != true)) {
                        this.locationField = value;
                        this.RaisePropertyChanged("location");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string skytext {
                get {
                    return this.skytextField;
                }
                set {
                    if ((object.ReferenceEquals(this.skytextField, value) != true)) {
                        this.skytextField = value;
                        this.RaisePropertyChanged("skytext");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string temperature {
                get {
                    return this.temperatureField;
                }
                set {
                    if ((object.ReferenceEquals(this.temperatureField, value) != true)) {
                        this.temperatureField = value;
                        this.RaisePropertyChanged("temperature");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string wind {
                get {
                    return this.windField;
                }
                set {
                    if ((object.ReferenceEquals(this.windField, value) != true)) {
                        this.windField = value;
                        this.RaisePropertyChanged("wind");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestChat.ServiceReference.ChatMessageTypes TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestChat.ServiceReference.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestChat.ServiceReference.ChatMessageTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestChat.ServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastLogin {
            get {
                return this.LastLoginField;
            }
            set {
                if ((this.LastLoginField.Equals(value) != true)) {
                    this.LastLoginField = value;
                    this.RaisePropertyChanged("LastLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessageTypes", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary")]
    public enum ChatMessageTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Posting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsersTotal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsersRegistered = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IContractWeather")]
    public interface IContractWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractWeather/GetWeather", ReplyAction="http://tempuri.org/IContractWeather/GetWeatherResponse")]
        TestChat.ServiceReference.WeathersCo GetWeather(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractWeather/GetWeather", ReplyAction="http://tempuri.org/IContractWeather/GetWeatherResponse")]
        System.Threading.Tasks.Task<TestChat.ServiceReference.WeathersCo> GetWeatherAsync(string city);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractWeatherChannel : TestChat.ServiceReference.IContractWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractWeatherClient : System.ServiceModel.ClientBase<TestChat.ServiceReference.IContractWeather>, TestChat.ServiceReference.IContractWeather {
        
        public ContractWeatherClient() {
        }
        
        public ContractWeatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractWeatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractWeatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractWeatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestChat.ServiceReference.WeathersCo GetWeather(string city) {
            return base.Channel.GetWeather(city);
        }
        
        public System.Threading.Tasks.Task<TestChat.ServiceReference.WeathersCo> GetWeatherAsync(string city) {
            return base.Channel.GetWeatherAsync(city);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IContractChat", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IContractChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/GetMessages", ReplyAction="http://tempuri.org/IContractChat/GetMessagesResponse")]
        TestChat.ServiceReference.ChatMessage[] GetMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/GetMessages", ReplyAction="http://tempuri.org/IContractChat/GetMessagesResponse")]
        System.Threading.Tasks.Task<TestChat.ServiceReference.ChatMessage[]> GetMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/PushMessage", ReplyAction="http://tempuri.org/IContractChat/PushMessageResponse")]
        void PushMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/PushMessage", ReplyAction="http://tempuri.org/IContractChat/PushMessageResponse")]
        System.Threading.Tasks.Task PushMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/LogIn", ReplyAction="http://tempuri.org/IContractChat/LogInResponse")]
        bool LogIn(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/LogIn", ReplyAction="http://tempuri.org/IContractChat/LogInResponse")]
        System.Threading.Tasks.Task<bool> LogInAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/LogOut", ReplyAction="http://tempuri.org/IContractChat/LogOutResponse")]
        bool LogOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/LogOut", ReplyAction="http://tempuri.org/IContractChat/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/Authenticate", ReplyAction="http://tempuri.org/IContractChat/AuthenticateResponse")]
        TestChat.ServiceReference.User Authenticate(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/Authenticate", ReplyAction="http://tempuri.org/IContractChat/AuthenticateResponse")]
        System.Threading.Tasks.Task<TestChat.ServiceReference.User> AuthenticateAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/GetUser", ReplyAction="http://tempuri.org/IContractChat/GetUserResponse")]
        TestChat.ServiceReference.User GetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/GetUser", ReplyAction="http://tempuri.org/IContractChat/GetUserResponse")]
        System.Threading.Tasks.Task<TestChat.ServiceReference.User> GetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/AddUser", ReplyAction="http://tempuri.org/IContractChat/AddUserResponse")]
        TestChat.ServiceReference.User AddUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/AddUser", ReplyAction="http://tempuri.org/IContractChat/AddUserResponse")]
        System.Threading.Tasks.Task<TestChat.ServiceReference.User> AddUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/DeleteUser", ReplyAction="http://tempuri.org/IContractChat/DeleteUserResponse")]
        bool DeleteUser(TestChat.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/DeleteUser", ReplyAction="http://tempuri.org/IContractChat/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(TestChat.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/UpdateUser", ReplyAction="http://tempuri.org/IContractChat/UpdateUserResponse")]
        bool UpdateUser(TestChat.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractChat/UpdateUser", ReplyAction="http://tempuri.org/IContractChat/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(TestChat.ServiceReference.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractChatChannel : TestChat.ServiceReference.IContractChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractChatClient : System.ServiceModel.ClientBase<TestChat.ServiceReference.IContractChat>, TestChat.ServiceReference.IContractChat {
        
        public ContractChatClient() {
        }
        
        public ContractChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestChat.ServiceReference.ChatMessage[] GetMessages() {
            return base.Channel.GetMessages();
        }
        
        public System.Threading.Tasks.Task<TestChat.ServiceReference.ChatMessage[]> GetMessagesAsync() {
            return base.Channel.GetMessagesAsync();
        }
        
        public void PushMessage(string message) {
            base.Channel.PushMessage(message);
        }
        
        public System.Threading.Tasks.Task PushMessageAsync(string message) {
            return base.Channel.PushMessageAsync(message);
        }
        
        public bool LogIn(string name, string password) {
            return base.Channel.LogIn(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogInAsync(string name, string password) {
            return base.Channel.LogInAsync(name, password);
        }
        
        public bool LogOut() {
            return base.Channel.LogOut();
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync() {
            return base.Channel.LogOutAsync();
        }
        
        public TestChat.ServiceReference.User Authenticate(string name, string password) {
            return base.Channel.Authenticate(name, password);
        }
        
        public System.Threading.Tasks.Task<TestChat.ServiceReference.User> AuthenticateAsync(string name, string password) {
            return base.Channel.AuthenticateAsync(name, password);
        }
        
        public TestChat.ServiceReference.User GetUser() {
            return base.Channel.GetUser();
        }
        
        public System.Threading.Tasks.Task<TestChat.ServiceReference.User> GetUserAsync() {
            return base.Channel.GetUserAsync();
        }
        
        public TestChat.ServiceReference.User AddUser(string name, string password) {
            return base.Channel.AddUser(name, password);
        }
        
        public System.Threading.Tasks.Task<TestChat.ServiceReference.User> AddUserAsync(string name, string password) {
            return base.Channel.AddUserAsync(name, password);
        }
        
        public bool DeleteUser(TestChat.ServiceReference.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(TestChat.ServiceReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public bool UpdateUser(TestChat.ServiceReference.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(TestChat.ServiceReference.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
    }
}
